设计原则：

﻿1.找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
 
2.多用组合，少用继承。

3. 针对接口编程，而不是针对实现编程。真正的意思是针对超类型编程。关键就在多态。利用多态程序可以针对超类型编程，执行时会根据实际情况执行到真正的行为，不会被绑死在超类型的行为上。

4.为交互对象之间的松耦合设计而努力

5.开放封闭原则 对扩展开放，对修改关闭。


组合建立系统具有很大的弹性，不仅可将算法族封装成类，更可以在运行时动态的改变行为，只要组合的行为对象符合正确的接口标准。

继承的缺点，代码在多个子类中重复。 运行时的行为不容易改变。很难知道所有对象的全部行为，改变会牵一发动全身，造成其他对象不想要的改变。

Dog d=new Dog(); 针对Dog类型时Animal借口的具体实现类，这样就必须针对实现编码。
Animal animal=new Dog(); 利用Animal进行多态的调用。
也可以通过模式达到子类实例化不需要Hardcode，而是在运行时才制定具体实现的对象。
d=getAnimal();
d.makeSound(); 只关心进行了动作。

设定方法（setter method）”来设定鸭子的行为，而不是在鸭子的构造器内实例化。

IS-A 是一个  HAS-A 有一个  IMPLEMENTS 实现

继承接口的是各种行为的实现，把每组行为想向成一个算法器。算法是可以互换的。

设计模式比库的等级高。设计模式告诉我们如何组织类和对象以解决某种问题。而且采纳这些设计并使它们适合我们特定的应用。

建立可维护的OO系统，就在于随时想到系统以后可能需要的变化以及应付变化的原则。

为了交互对象之间的松耦合设计而努力。
送耦合的设计之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的互相依赖降低到了最低。

利用组合composition和委托delegation可以在运行时具有继承行为的效果。

利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。

如果利用组合的做法扩展对象的行为，可以在运行时动态的进行扩展。

类应该对扩展开发，对修改关闭。

继承虽然威力很强大，但是并不总是能够实现具有弹性和维护的设计。



