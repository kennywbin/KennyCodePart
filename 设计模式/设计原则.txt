1.找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
2.针对接口编程，而不是针对实现编程。真正的意思是针对超类型编程。关键就在多态。利用多态程序可以针对超类型编程，执行时会根据实际情况执行到真正的行为，不会被绑死在超类型的行为上。
3.多用组合，少用继承。

组合建立系统具有很大的弹性，不仅可将算法族封装成类，更可以在运行时动态的改变行为，只要组合的行为对象符合正确的接口标准。

Dog d=new Dog(); 针对Dog类型时Animal借口的具体实现类，这样就必须针对实现编码。
Animal animal=new Dog(); 利用Animal进行多态的调用。
也可以通过模式达到子类实例化不需要Hardcode，而是在运行时才制定具体实现的对象。
d=getAnimal();
d.makeSound(); 只关心进行了动作。

设定方法（setter method）”来设定鸭子的行为，而不是在鸭子的构造器内实例化。

IS-A 是一个  HAS-A 有一个  IMPLEMENTS 实现

继承接口的是各种行为的实现，把每组行为想向成一个算法器。算法是可以互换的。



