策略模式Strategy Pattern：
定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。

继承 extend 实线空三角
实现接口   implement  虚线空三角
有一个 关系 是  实线箭头


策略模式 在框架方面与状态模式很相似，但意图却略有不同。策略模式由一组相关的算法组成。这些算法被封装称做Content（上下文）

驱动类中。

客户端程序可以选择这些不同的算法。或在某中情况下，由Content来为你选择最合适的算法。该模式的目的是使得这些算法之间互换、

并提供一种选择最合适算法的方式。状态模式与策略模式之间的区别是，用户一般会选中几个策略模式的一个加以使用。同一时间只可能

会有一个策略模式被实例化以及活动于Content类的内部。策略模式封装的多个算法所完成事情多多少少都会有些相同。而状态模式封装的相关类每一个实现的事情都有所不同。最后一点。在不同状态之间的转化的概念在策略模式中是完全略去的。


策略模式，明明需要客户端知道有哪些玩法，不等于还是把具体的玩法类暴露出来了。是的，为了进一步隔离客户端和玩法类，把构造玩法对象，放到PlayContext中，PlayContext根据条件，自行构造玩法对象。这不就成了简单工厂模式了吗？问题来了，简单工厂模式和策略模式到底有什么不同呢？

    1、关注点不同：工厂模式封装的是复杂对象的创建，而策略模式封装的是一个对象的多种行为。PlayContex如果作为工厂，肯定返回一个play对象，如果作为策略，肯定执行一个Play对象的行为。

    2、策略模式可以使客户端避免直接接触算法的一些细节，工厂模式可以使客户端不必关心对象的构造过程。


P26


