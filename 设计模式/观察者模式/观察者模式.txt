观察者Observer模式：
主题，发布者 Subject 观察者，接收者 Observer

定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

主题接口： 包含registerObserver removeObserver notifyObservers 注册 注销 通知 方法
观察者接口：包含update 方法来实现收到通知后需要做的事情。

利用观察者模式，主题是具有状态的对象，并且可以控制这些状态。
有 一个 具有状态的主题。
观察者使用这些状态，虽然这些状态不属于他们。有许多的观察者，依赖主题来告诉他们状态何时改变了。

主题是真正拥有数据的，观察者是主题的依赖者，数据变化时更新，比让许多对象控制同一份数据要更干净的oo设计。

松耦合

当两个对象之间松耦合，依然可以交互，但是不太清楚彼此的细节。 观察者模式提供一种对象设计，让主题和观察者之间松耦合。
主题只知道观察者实现了某个接口Observer接口。主题不需要知道观察者的具体类是谁，做了什么和其他细节。

任何时候可以增加新的观察者，主题唯一依赖的东西是一个实现Observer接口的列表对象。
新类型的观察者出现时，主题不需要修改，新的类实现Observer接口注册为观察者即可。

可以在可观察者定义一个setChanged方法 来设置一个标志来说明 状态已经更新，可以调用notifyObservers 方法中来判断这个标志。是否通知观察者。
也可以增加一个hasChanged来显示当前标志的状态。
增加Get方法组 可以让观察者根据标志来拉数据，而不用可观察者来推送数据。

推的方式更正确一些。




