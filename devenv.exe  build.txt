------------------------------------------------------------------------
------------------------------------------------------------------------
先看一个例子，在解决方案目录(Test.sln)命令行输入下面的命令，将会自动编译解决方案。D:\Test> %SYSTEMROOT%\Microsoft.NET\Framework\v2.0.50727\MSBuild.exe Test.sln /t:Rebuild /p:Configuration=Release /l:FileLogger,Microsoft.Build.Engine;logfile=Build.log
常用参数说明：
/t:Rebuild|Clearn 生成目标
/p:Configuration=Debug|Release 项目属性
/l:FileLogger,Microsoft.Build.Engine;logfile=Build.log 编译日志
/clp:PerformanceSummary 显示任务、目标和项目花费的时间
------------------------------------------------------------------------
set MyMSBuildPath="C:\Windows\Microsoft.NET\Framework\v3.5\MSBuild.exe"
set MySlnPath="..\MYXX_20161229-15_29_09.sln"
%MyMSBuildPath%  %MySlnPath% /t:build /p:Configuration=Release /p:Platform=Win32  /m:
------------------------------------------------------------------------
为什么不在命令行或批处理里面使用
"C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe" d:\mydir\myproj.sln /rebuild "Release|Win32"
start notepad d:\mydir\myproj\Release\myproj.log
--------------------------------------------------------------------------
@echo off  
  
call "E:\Visual Studio 2015 Enterprise\Common7\Tools\VsDevCmd.bat"  
  
echo "building openfstwin-1.3.4...."  
  
MSBuild tools/openfstwin-1.3.4/MSVC14/openfstwin.sln /t:Rebuild /p:Platform=x64 /p:Configuration=Release  
  
pause  
  
echo "building kaldi...."  
  
rem MSBuild /help  
  
pause  
  
MSBuild kaldiwin_vs2015_OPENBLAS/kaldiwin_vs2015.sln /t:Rebuild /p:Platform=x64 /p:Configuration=Release  
rem MSBuild MyApp.csproj /t:Clean /m 4  
rem                      /p:Configuration=Debug;/p:Platform=x86;TargetFrameworkVersion=v3.5  
  
pause  

-------------------------------------------------------------------------------

注册devenv.exe。这样就可以直接使用devenv.exe来 build solution
>reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\Setup\VS /v EnvironmentPath

-----------------------------------------------------------------
使用devenv来build单个project

devenv是VisualStudio的可执行程序，一般安装在“C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE”下。用来在命令行或GUI方式运行VisualStudio。其中devenv.com是命令行程序，devenv.exe是GUI的程序。默认地当你调用devenv的时候其实是启动devenv.com，除非你显示地调用devenv.exe才会启动GUI的VisualStudio。


使用devenv来build一个.sln的实例：
devenv d:\Build\MyProject\Src\MyProject.sln /Build "Release|Win32"  

 

使用devenv来build一个.sln中的某个的实例：
devenv.exe d:\Build\MyProject\Src\NyProject.sln /build "Release|Win32" /Project MyProject1 
注意：通常地.sln中的多个Projects间有依赖关系，所以虽然你只是build一个.sln中的某个Project，但是还是需要指定Project所在.sln，然后通过/Project来指定Project的名字。
 
如果只是单个的Project，没有引用其他的projects，这个时候可以不指定.sln，直接build Project，如下实例：

devenv d:\Build\MyProject\Src\MyProject.vcxproj /Build "Release|Win32"
注意此时实际上devenv做如下事：

此时devenv将在此project文件的父目录中查找与Project相同名字的.sln；
如果没有找到的话，然后查找其他的引用了此Project的.sln；
如果还是没有找到的话会创建临时的不保存的与Project同名的.sln。
 

二 devenv的更多帮助 

可以使用devenv /?来查看详细的帮助。
.sln或project的路径有空格时，需要对路径加"";
多个/开关间使用空格隔开；
devenv不支持通配符或正则表达式语法；
 

三 MSBuild

如果你的机器上没有装有VisualStudio，那么可以使用MSBuild来build .sln或project。MSBuild可以通过安装.NETFramework来安装，一般的安装路径为C:\Windows\Microsoft.NET\Framework。其实devenv执行build时候，后台也是调用MSBuild来build的。

 

可以使用msbuild /?来查看详细的帮助；

 

简单实例如下： 

MSBuild MyApp.sln /t:Rebuild /p:Configuration=Release
MSBuild MyApp.csproj /t:Clean
                     /p:Configuration=Debug;/p:Platform=x86;TargetFrameworkVersion=v3.5
 

同样注意，如果project引用了其他的projects的时候，最好build整个.sln。 



------------------------------------------------------------------------------------------------

有时候大家需要获取vs 安装路径并执行一些参数，或拷贝，比如执行devenv.exe 或是 devenv.com /InstallVSTemplates 就要获取VS的安装路径，在注册表中有这么一项数据：

储存着vs的安装目录。可以通过如下代码获取：

            InstallDir = Microsoft.Win32.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\10.0\\Setup\\VS", 
                "EnvironmentDirectory", null).ToString();
这样便可以得知vs是否安装，以及安装的目录，以便执行更多的参数，在注册表中还有各种各样的参数大家可以自己找找看啊。

-------------------------------------------------------------------------------------------------------

set DEV_PATH="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\devenv.com"
set WARE_PATH="../../../WarePlugin/solution/WarePlugin.sln"
set NWARE_PATH="../../../NWarePlugin/solution/NwarePlugin.sln"
set TRADE_PATH="../../../TradePlugin/solution/TradePlugin.sln"
set GLOD_PATH="../../../GoldPricePlugin/solution/GoldPricePlugin.sln"

@echo =====================================
@echo 正在编译主工程文件文件...
%DEV_PATH% "../../solution/WorkStation.sln" /rebuild Release /out main.txt

--------------------------------------------------------------------------------------------------------
　　Path to MSBuild:
　　%system%\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe

MSBuild yourproject.sln /p:Configuration=Release /p:Platform=x64 /p:

MSBuild Version 为刚才配置的 MSBuild.exe

MSBuild Build File 是项目文件或者工程文件的名称

然后就是MSBuild 的命令行参数了。

/t:Rebuild 表示每次都重建，不使用增量编译

/P:Configuration=Release 表示编译 Release 版本

/p:DeployOnBuild=true 表示启用编译并发布

/p:VisualStudioVersion=11.0 表示VS2012

PublishProfile 指定创建的Profile名称

/p:DefineConstants=\"ZHEJIANGSZ,SILVERLIGHT,TRACE\" 浏览器内

----------------------------------------------------------------------------------------------------------

用脚本自动编译C#工程
打开cmd ,进入项目文件夹 运行 ：msbuild  ****.sln  /P:Configuration=release  编译Release版本 打开bin文件夹中的release文件夹可以看到编译出的程序

批处理实例*.bat

@echo off

call "D:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86   

MSBuild F:\***.sln /t:Rebuild /P:WarningLevel=2;Configuration=release   //开始编译

copy F:\***\bin\release\***.exe Z:\Install\InstallFile   //把编译出的程序，拷贝到别的文件夹


？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？

从 Visual Studio 2013 开始，你可以在 MSBuild 文件夹中查找 MSBuild.exe（32 位操作系统上的 %ProgramFiles%\MSBuild，或者 64 位操作系统上的 %ProgramFiles(x86)%\MSBuild）。


Repositories Url: 输入项目的Git地址，如：

git@gitlab.gofund.com:dotnet/nonsuch.git

Repository browser: gitlab

Url: gitlab的url地址,比如: http://gitlab.gofund.com.cn/dotnet/nonsuch

Version: 6.2

--------------------------------------------------------------------------------------------
https://msdn.microsoft.com/zh-cn/library/dd576348.aspx


----------------------------------------------------------------------------------------------------

对于coder来说，编译代码常用的是visual studio下面的IDE 右键功能。但有时可能要批量或者定时编译项目，如何处理呢？

1. devenv。visual studio自带的编译工具，devenv.com/devenv.exe，前者是命令行工具，后者是IDE工具。使用前提是环境中安装了visual studio。工具路径：“C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE”。

   devenv project.sln /build "release" .等同于vs下的右键生成（解决方案）

2.msbuild。其实vs编译项目或解决方案后台调用的是此命令。针对vs2005+以后的项目，不需要安装vs。工具路径：C:\Windows\Microsoft.NET\Framework。

 msbuild project.sln /p:configuration=Release /t:Rebuild.


针对编译后生成的文件类型主要有以下几种：

1. dll. 类库文件

2. exe 可执行文件

3. exe.config 配置文件

4 pdb 程序数据库文件（主要用于调试）

5.vshost.exe 调试宿主文件

6.vshost.exe.config 宿主配置文件

7.vshost.exe.manifest 宿主清单文件


在实际的版本发布中我们需要用到的是1，2，3三类文件，但是其它文件在编译时也会生成，如何去掉这些不需要的文件呢？

1.vs开发IDE中在项目属性中可以设置是否生成不必要的文件。

在项目属性-->生成-->高级-->调试信息-->none可以不生成pdb文件。

在项目属性-->调试-->启用调试器-->启用visual studio承载进程(去掉勾选)可以不生成.vshost.*文件。

2.msbuild.在上面我们提到，vs实际上调用的是msbuild来进行编译，所以vs中相关设置大部分都可以在msbuild中找到相对应的设置。

msbuild project.sln /p:Configuration=Release /t:Rebuild. release模式下编译没有.vshost相关文件，但.pdb文件依然存在（虽然此文件和debug模式下不一样）。

msbuild project.sln /p:Configuration=Release;DebugType=none /t:Rebuild.添加debugtype设置可以控制pdb文件的生成和类型。帮助中有个DebugSymbols=false属性可以控制pdb文件的生成，但我测试没有效果，有知道详情的可以补充下。

编译网站和编译类库或winform项目类似，但想直接发布网站，类似VS IDE下的右键发布。

1.vs右键发布，选择发布的目标路径就可以发布。

2.msbuild.有类似的参数控制执行相同的操作。vs2010环境下的样例：

msbuild website.csproj /t:ResolveReferences;Compile;_WPPCopyWebApplication /p:Configuration=Release;DebugType=none;WebProjectOutputDir=..\Publish.
此命令发布完网站后会丢失部分dll文件（间接依赖），修改成如下命令即可避免：

msbuild website.csproj /t:_WPPCopyWebApplication;ResolveReferences;Compile /p:Configuration=Release;DebugType=none;WebProjectOutputDir=..\Publish.
